---
traefik_config:
  # Global configuration
  checkNewVersion: true
  api:
    basePath: /traefik   # so now api and dashboard will be accessible by /traefik/{api, dashboard}
    dashboard: true
    insecure: false

  log:
    level: INFO

  accesslog:
    addInternals: true

  # Entrypoints configuration
  entryPoints:
    web:
      address: :2080
      http:
        redirections:
          entryPoint:
            to: websecure
            scheme: https
    websecure:
      address: :2443
      http:
        tls:
          certResolver: acmeDNS

  certificatesResolvers:
    acmeTLS:
      acme:
        email: s@sbog.org
        storage: /etc/traefik/ssl-certs/acme.json
        tlsChallenge: true
        #caserver: https://acme-v02.api.letsencrypt.org/directory
    acmeDNS:
      acme:
        email: s@sbog.org
        storage: /etc/traefik/ssl-certs/acme.json
        dnsChallenge:
          provider: cloudflare
          resolvers:
            - 1.1.1.1:53
            - 8.8.8.8:53
        #caserver: https://acme-v02.api.letsencrypt.org/directory

  # Providers configuration
  providers:
    swarm:
      endpoint: unix:///var/run/docker.sock
      watch: true
      exposedbydefault: false
    file:
      directory: "{{ traefik_host_confdir }}/dynamic-conf"
      watch: true

traefik_host_confdir: /etc/traefik

traefik_docker_image: "traefik"
traefik_docker_tag: v3.4.4
traefik_container_name: "traefik"
# In case you need to filter incoming packages by IP, you have to expose traefik
# directly on swarm node. In other case it will be published on swarm ingress
# network by default - and you will have spoofed IP as ingress will do that on L3.
# As a result all incoming packets will have src IP of ingress and you won't be
# able to filter based on src.
# So in case you will publish on swarm node directly, your traefik_ports var has
# to look like:
# traefik_ports:
#   - target: 80
#     published: 80
#     protocol: tcp
#     mode: host
#   - target: 443 
#     published: 443 
#     protocol: tcp
#     mode: host
traefik_ports:
  - "2080:2080"
  - "2443:2443"
traefik_docker_hostname: "traefik"
traefik_volumes:
  - /var/run/docker.sock:/var/run/docker.sock
  - "{{ traefik_host_confdir }}:/etc/traefik"

traefik_docker_labels: []
traefik_environment_vars:
  - CF_API_EMAIL=example@example.com
  - CF_API_KEY=somekey

# Docker-related networking settings
traefik_docker_networks: 
  tf_net:
    name: "tf_net"
    external: true

traefik_stack_name: traefik
traefik_swarm_cluster: false
traefik_web_host: example.com
traefik_swarm_deploy:
  mode: global
  labels:
    # Enable traefik itself
    - "traefik.enable=true"
    - "traefik.swarm.network={{ traefik_docker_network_name }}"
    # Enable dashboard
    - "traefik.http.routers.dashboard.rule=Host(`{{ traefik_web_host }}`) && (PathPrefix(`/traefik/api`) || PathPrefix(`/traefik/dashboard`))"
    - "traefik.http.routers.dashboard.service=api@internal"
    - "traefik.http.routers.dashboard.middlewares=basic-auth@file"
    - "traefik.http.routers.dashboard.entrypoints=websecure"
    - "traefik.http.routers.dashboard.tls=true"
    - "traefik.http.routers.dashboard.tls.certResolver=acmeDNS"
    - "traefik.http.services.traefik.loadbalancer.server.port=9999"    # dummy port, https://doc.traefik.io/traefik/operations/dashboard/#secure-mode

traefik_dynamic_confs:
  global_basicauth.yml:
    http:
      middlewares:
        basic-auth:
          basicAuth:
            users:
              - "<username>:$apr1$<somedatahere>"

# example traefik_swarm_deploy:
#   mode: replicated
#   replicas: 1
#   update_config:
#     order: start-first
#   placement:
#     max_replicas_per_node: 1
#     constraints:
#       - node.labels.monitoring == true
#   resources:
#     limits:
#       memory: 512M
#     reservations:
#       memory: 256M
